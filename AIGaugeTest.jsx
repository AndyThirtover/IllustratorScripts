#target "Illustrator"#targetengine main//  Create the dialog box firstvar result = gaugeDialog();$.writeln("Result was: " + result);var radius = parseInt(result.radius);var steps = parseInt(result.steps);var value_offset = parseInt(result.offset);var value_multiplier = parseInt(result.value_multiplier);var width = 1000;var height = 1000;var centre = width/2;var total_angle = 240;var offset = -90 - (360-total_angle)/2;var align=1var minticks=10;draw_gauge();function position_from_angle(radius,angle){    x = centre + radius*Math.cos(angle*Math.PI/180);    y = centre + radius*Math.sin(angle*Math.PI/180);    return [x,y] ;}function radius_put_value(doc,radius,angle,value,align) {    this_text = doc.textFrames.pointText(position_from_angle(radius,angle));    this_text.contents = value.toString();    this_text.paragraphs[0].paragraphAttributes.justification = Justification.CENTER;    if (align == 1) {        this_text.rotate(angle-90);    }}function place_tick(doc,radius,angle,start,end,width) {    var this_path = doc.pathItems.add();    this_path.setEntirePath ([position_from_angle(radius-start,angle), position_from_angle(radius-end,angle)]);    this_path.strokeWidth = width;}function draw_gauge() {    var doc = app.documents.add(null,width,height);    $.writeln("Draw Gauge Called: " + radius + " steps " + steps);    var step;    for (step = 0; step <= steps; step++) {        $.writeln("Calling Put Radius Value");        radius_put_value(doc,                        radius,                        (-step*total_angle/steps)+offset,                        value_offset+(step*steps*value_multiplier),                        align);    }    $.writeln("Add  Minor Ticks");    // Add the Minor Ticks    doc.layers.add().name = "TicksMinor" ;    minsteps = steps * minticks ;    for (step = 0; step <= minsteps; step++) {        place_tick(doc, radius,                (-step*total_angle/minsteps)+offset,                10,                20,                5) ;    }    $.writeln("Add Major Ticks");    // Add the Major Ticks    doc.layers.add().name = "TicksMajor" ;    for (step = 0; step <= steps; step++) {        place_tick(doc, radius,                (-step*total_angle/steps)+offset,                10,                40,                10) ;    }    return 1;}function gaugeDialog()     {          function add_child(name,def_value,units){            this.line = myDialog.add('group');            this.line.add('statictext',undefined,name);            var ret_val = this.line.add('edittext',undefined,def_value);            this.line.add('statictext',undefined,units);            return ret_val;        }        var myDialog = new Window ('dialog', 'Radial Gauge');          myDialog.alignChildren = "left";        var radius = add_child('Radius',400,'mm');        var steps = add_child('Steps',10,'number');        var offset = add_child('Start Offset',0,'value');        var value_multiplier = add_child('Multiplier',1,'value');        var rgo = myDialog.add ('group');              rgo.alignment = "right";              rgo.add('button', undefined, 'Cancel', {name: 'cancel'});              rgo.add('button', undefined, 'OK', {name: 'ok'});  var myResult = myDialog.show();  if (myResult == 1)   {       $.writeln("Will return: " + radius.text )     return {   radius : radius.text,                 steps : steps.text,                 offset : offset.text,                value_multiplier : value_multiplier.text             };   }  if (myResult == 2)   {       exit();   }  }  